import streamlit as st
import pandas as pd
from googleapiclient.discovery import build

# Replace with your YouTube API key
api_key = 'YOUR_YOUTUBE_API_KEY'

# List of channel IDs
channel_ids = [
    'UCWjJ0lSAXKaGd9EeWQLYVtQ',  # SkillsDirection
    'UCc28LDlk4N2h37zWZWj-t1A',  # LearnEnglish
    'UCWNuH1-JGn4nZ7uRuURhG6g',  # EnglishAnika
    'UCOvsCixXw19GHxe34mqXw3A',  # Nileg
    'UCTn-HaKV8vju5G2j6wRTzwQ',  # BodyBrain
    'UCpNUYWW0kiqyh0j5Qy3aU7w',  # Misra Turp
    'UCG8nFCXDN907eYU43JMck-g',  # Learn English with Matta
    'UCvy_5_4s3jAyGjX62CB1qcA',  # Starr Factory
    'UCTqmTIDAauPm7_MY6UuqYzg',  # Umang tambi
    'UC-S2cf2krYdMP8cJmOAdLZA',  # Tigerman Root
]

# Function to get channel data based on selection
def get_selected_channel_data(selected_channel, video_data):
    # Initialize the YouTube API client
    youtube = build('youtube', 'v3', developerKey=api_key)

    if selected_channel not in video_data['Channel_ID'].unique():
        # Fetch data only for the selected channel
        selected_channel_ids = [selected_channel]
        selected_data = get_channel_data(youtube, selected_channel_ids)

        # Append new data to the existing DataFrame
        new_video_data = pd.DataFrame(selected_data)
        video_data = pd.concat([video_data, new_video_data], ignore_index=True)

        return video_data, f"Data for channel '{selected_channel}' fetched and added."
    else:
        return video_data, f"Data for channel '{selected_channel}' is already added."

# Initialize the YouTube API client
youtube = build('youtube', 'v3', developerKey=api_key)

def get_channel_data(youtube, channel_ids):
    all_data = []

    for channel_id in channel_ids:
        channel_data = {}

        # Get channel details
        channel_request = youtube.channels().list(
            part='snippet, statistics',
            id=channel_id
        )
        channel_response = channel_request.execute()
        channel_data["Channel_ID"] = channel_id
        channel_data["Channel_Name"] = channel_response['items'][0]['snippet']['title']
        channel_data["Subscribers"] = channel_response['items'][0]['statistics']['subscriberCount']
        channel_data["Views"] = channel_response['items'][0]['statistics']['viewCount']
        channel_data["Total_Videos"] = channel_response['items'][0]['statistics']['videoCount']

        # Get playlist details for the channel
        playlist_request = youtube.channels().list(
            part='contentDetails',
            id=channel_id
        )
        playlist_response = playlist_request.execute()
        uploads_playlist_id = playlist_response['items'][0]['contentDetails']['relatedPlaylists']['uploads']

        # Get video details for the playlist
        video_ids = get_video_ids(youtube, uploads_playlist_id)
        video_details = get_video_details(youtube, video_ids, channel_data)
        
        all_data.extend(video_details)

    return all_data

# Function to get video details for a list of video IDs
def get_video_details(youtube, video_ids, channel_data):
    all_video_stats = []

    for i in range(0, len(video_ids), 50):
        request = youtube.videos().list(
            part='snippet, statistics',
            id=','.join(video_ids[i:i+50])
        )
        response = request.execute()

        for video in response['items']:
            video_stats = {
                "Title": video['snippet']['title'],
                "Publish_Dt": video['snippet']['publishedAt'],
                "Views": video['statistics']['viewCount'],
                "Likes": video['statistics'].get('likeCount', 0),
                "Dislikes": video['statistics'].get('dislikeCount', 0),
                "Comments": video['statistics'].get('commentCount', 0),
                "Channel_Name": channel_data["Channel_Name"],
                "Channel_ID": channel_data["Channel_ID"],                
                "Subscribers": channel_data["Subscribers"],
                "Total_Videos": channel_data["Total_Videos"],
            }
            all_video_stats.append(video_stats)

    return all_video_stats

# Create an initial empty DataFrame to store the data
video_data = pd.DataFrame()

# Streamlit UI
st.title('YouTube Channel Data Extraction')
selected_channel = st.selectbox('Select Channel', channel_ids)  # Dropdown to select channel

if st.button('Get Data'):
    if selected_channel:  # Check if a channel is selected
        video_data, message = get_selected_channel_data(selected_channel, video_data)
        st.write(message)
    else:
        st.warning('Please select a channel')

# Display the DataFrame if data is available
if not video_data.empty:
    st.subheader('Data from YouTube')
    st.write(video_data)
